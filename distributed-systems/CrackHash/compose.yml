services:
  manager:
    build: CrackHashManager
    depends_on:
      rabbitmq:
        condition: service_started
      mongo1:
        condition: service_healthy
    container_name: crackhash-manager
    ports:
      - 8080:8080
    networks:
      - crackhash-net
    env_file:
      - .env

  worker:
    build: CrackHashWorker
    depends_on:
      - rabbitmq
    networks:
      - crackhash-net
    env_file:
      - .env
    deploy:
      replicas: ${WORKER_COUNT:-1}
    ports:
      - 8081

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - .env
    networks:
      - crackhash-net

  mongo1:
    image: mongo
    container_name: mongo1
    command: [ "--replSet", "my-replica-set","--bind_ip_all", "--port", "27017" ]
    volumes:
      - ./mongodb/data/mongo-1:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'my-replica-set',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 18s
      retries: 3
      start_period: 40s
    networks:
      - crackhash-net

  mongo2:
    image: mongo
    container_name: mongo2
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--port", "27018" ]
    volumes:
      - ./mongodb/data/mongo-2:/data/db
    ports:
      - 27018:27018
    networks:
      - crackhash-net

  mongo3:
    image: mongo
    container_name: mongo3
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--port", "27019" ]
    volumes:
      - ./mongodb/data/mongo-3:/data/db
    ports:
      - 27019:27019
    networks:
      - crackhash-net

networks:
  crackhash-net:
    driver: bridge