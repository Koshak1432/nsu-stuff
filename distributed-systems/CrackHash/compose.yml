services:
  manager:
    build: CrackHashManager
    depends_on:
      - rabbitmq
    container_name: crackhash-manager
    ports:
      - 8080:8080
    networks:
      - crackhash-net
    env_file:
      - .env

  worker:
    build: CrackHashWorker
    depends_on:
      - rabbitmq
    networks:
      - crackhash-net
    env_file:
      - .env
    deploy:
      replicas: ${WORKER_COUNT:-1}
    ports:
      - 8081

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - .env
    networks:
      - crackhash-net
#    volumes:
#      - rabbitmq.conf:/etc/rabbitmq/rabbitmq.config

#  mongodb:
#    image: mongo
##    restart: always
#    ports:
#      - "27017-27019:27017"
#    env_file:
#      - .env
#    volumes:
##      - ./mongo-data:/data/db
#      - ./init-replica-set.sh:/docker-entrypoint-initdb.d/init-replica-set.sh
#    deploy:
#      replicas: ${BD_REPLICAS:-3}
#    networks:
#      - crackhash-net

  mongo1:
    image: mongo
    container_name: mongo1
    command: [ "--replSet", "my-replica-set","--bind_ip_all", "--keyFile", "/data/keyfile.key", "--port", "27017" ]
    env_file:
      - .env
    volumes:
      - ./mongo/data/mongo-1:/data/db
      - ./mongo/keyfile.key:/data/keyfile.key
    ports:
      - 27017:27017

    healthcheck:
#      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27018\"},{_id:2,host:\"mongo3:27019\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'my-replica-set',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 10s
      start_period: 30s
    networks:
      - crackhash-net

  mongo2:
    image: mongo
    container_name: mongo2
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--keyFile", "/data/keyfile.key", "--port", "27018" ]
    env_file:
      - .env
    volumes:
      - ./mongo/data/mongo-2:/data/db
      - ./mongo/keyfile.key:/data/keyfile.key
    ports:
      - 27018:27018
    networks:
      - crackhash-net

  mongo3:
    image: mongo
    container_name: mongo3
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--keyFile", "/data/keyfile.key", "--port", "27019" ]
    env_file:
      - .env
    volumes:
      - ./mongo/data/mongo-3:/data/db
      - ./mongo/keyfile.key:/data/keyfile.key
    ports:
      - 27019:27019
    networks:
      - crackhash-net

#  mongo-express:
#    image: mongo-express
#    restart: always
#    depends_on:
#      - mongo1
#    ports:
#      - 8090:8081
#    env_file:
#      - .env
#    networks:
#      - crackhash-net


networks:
  crackhash-net:
    driver: bridge